# bot_margarita.py ‚Äî –ª–æ–≥–∏–∫–∞ 1-–≤-1 –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –±–æ—Ç–µ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö ¬´—Ä–µ–∑–æ–≤¬ª —Ç–µ–∫—Å—Ç–∞

import os
import random
import requests
from typing import Tuple, Optional

from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    Application,  # —Ç–∏–ø –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    filters,
)

# === ENV ===
NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "").strip()
DATABASE_ID  = os.environ.get("DATABASE_ID", "").strip()

if not NOTION_TOKEN or not DATABASE_ID:
    print("WARN: NOTION_TOKEN or DATABASE_ID not set")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—É—Ç–∏–ª–∏—Ç—ã ===
TEXT_INPUT, VIDEO_INPUT = range(2)

# –ñ—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞ ~4096; –æ—Å—Ç–∞–≤–∏–º –∑–∞–ø–∞—Å, —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è —Ä–æ–≤–Ω–æ –≤ 4096
TELEGRAM_HARD_LIMIT = 4096
SAFE_LIMIT = 3900

def _headers():
    return {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }

def split_text(text: str, max_length: int = SAFE_LIMIT):
    """–†–µ–∂–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞.
    –°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∑–∞—Ç—å –ø–æ –ø—Ä–æ–±–µ–ª—É, —á—Ç–æ–±—ã –Ω–µ —Ä–≤–∞—Ç—å —Å–ª–æ–≤–∞.
    """
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind(" ", 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    if text:
        parts.append(text)
    return parts

def get_ready_reels() -> Optional[dict]:
    """–ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ –°—Ç–∞—Ç—É—Å–æ–º == '–ì–æ—Ç–æ–≤'."""
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    payload = {"filter": {"property": "–°—Ç–∞—Ç—É—Å", "select": {"equals": "–ì–æ—Ç–æ–≤"}}}
    res = requests.post(url, headers=_headers(), json=payload, timeout=30)
    res.raise_for_status()
    data = res.json()
    if not data.get("results"):
        return None
    return random.choice(data["results"])

def extract_reel_info(page: dict) -> Tuple[str, str, str, str]:
    """–î–æ—Å—Ç–∞—ë–º (video, hook, desc, page_id) –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    props = page.get("properties", {})
    def _title(prop):
        arr = props.get(prop, {}).get("title", [])
        return arr[0]["text"]["content"] if arr else ""
    def _rt(prop):
        arr = props.get(prop, {}).get("rich_text", [])
        return "".join(part.get("text", {}).get("content", "") for part in arr)

    video = _title("–í–∏–¥–µ–æ")
    hook  = _rt("–•—É–∫")
    desc  = _rt("–û–ø–∏—Å–∞–Ω–∏–µ")
    return video, hook, desc, page["id"]

def update_status(page_id: str):
    """–ú–µ–Ω—è–µ–º –°—Ç–∞—Ç—É—Å –Ω–∞ '–ó–∞–ª–∏—Ç'."""
    url = f"https://api.notion.com/v1/pages/{page_id}"
    payload = {"properties": {"–°—Ç–∞—Ç—É—Å": {"select": {"name": "–ó–∞–ª–∏—Ç"}}}}
    res = requests.patch(url, headers=_headers(), json=payload, timeout=30)
    res.raise_for_status()

def add_to_notion(hook: str, description: str, video: str):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–°—Ç–∞—Ç—É—Å = '–ì–æ—Ç–æ–≤')."""
    url = "https://api.notion.com/v1/pages"
    data = {
        "parent": {"database_id": DATABASE_ID},
        "properties": {
            "–í–∏–¥–µ–æ": {"title": [{"text": {"content": str(video)}}]},
            "–•—É–∫": {"rich_text": [{"text": {"content": part}} for part in split_text(str(hook))]},
            "–û–ø–∏—Å–∞–Ω–∏–µ": {"rich_text": [{"text": {"content": part}} for part in split_text(str(description))]},
            "–°—Ç–∞—Ç—É—Å": {"select": {"name": "–ì–æ—Ç–æ–≤"}},
        },
    }
    res = requests.post(url, headers=_headers(), json=data, timeout=30)
    res.raise_for_status()


# === HANDLERS (async, PTB v20) ===

async def send_reel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reel ‚Äî –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é '–ì–æ—Ç–æ–≤' –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –•—É–∫ + –û–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ–º–µ—Ç–∏—Ç—å '–ó–∞–ª–∏—Ç'."""
    try:
        page = get_ready_reels()
        if not page:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ì–æ—Ç–æ–≤'.")
            return
        video, hook, desc, page_id = extract_reel_info(page)

        # 1) –•—É–∫ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if hook:
            await update.message.reply_text(hook)

        # 2) –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ï–°–õ–ò –≤–ª–∞–∑–∏—Ç; –∏–Ω–∞—á–µ —Ä–µ–∂–µ–º –ø–æ SAFE_LIMIT
        if desc:
            if len(desc) <= SAFE_LIMIT:
                await update.message.reply_text(desc)
            else:
                for part in split_text(desc, SAFE_LIMIT):
                    await update.message.reply_text(part)

        update_status(page_id)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def get_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /score ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '–ì–æ—Ç–æ–≤'."""
    try:
        url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
        payload = {"filter": {"property": "–°—Ç–∞—Ç—É—Å", "select": {"equals": "–ì–æ—Ç–æ–≤"}}}
        res = requests.post(url, headers=_headers(), json=payload, timeout=30)
        res.raise_for_status()
        data = res.json()
        count = len(data.get("results", []))
        await update.message.reply_text(f"üìä –°–µ–π—á–∞—Å {count} Reels —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ì–æ—Ç–æ–≤'.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ /add: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–ª—ë—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ö—É–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)."""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ —Ö—É–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî —Ö—É–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ."
    )
    return TEXT_INPUT

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç /add (—Ö—É–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ), —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (–í–∏–¥–µ–æ –ø—É—Å—Ç–æ–µ)."""
    message = (update.message.text or "").strip()
    parts = message.split("\n\n", 1)
    hook = parts[0].strip()
    description = parts[1].strip() if len(parts) > 1 else ""
    try:
        add_to_notion(hook, description, "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    return ConversationHandler.END


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –î–õ–Ø server.py ===
def register_handlers(application: Application):
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("reel", send_reel))
    application.add_handler(CommandHandler("score", get_score))

    # –î–∏–∞–ª–æ–≥ /add (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_add)],
        states={
            TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text)],
        },
        fallbacks=[],
    )
    application.add_handler(conv)

    # –ù–∏–∫–∞–∫–∏—Ö —ç—Ö–æ/–æ–±—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
