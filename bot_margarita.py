
import locale
import sys
import requests
import random
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import os

# –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É–¥–æ–±–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å .env (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Render —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

NOTION_TOKEN = os.environ["NOTION_TOKEN"]          # –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_ID  = os.environ["DATABASE_ID"]           # –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN    = os.environ["TELEGRAM_BOT_TOKEN"]    # –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# === –ù–ê–°–¢–†–û–ô–ö–ò ===


headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json"
}

def split_text(text, max_length=1800):
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind(" ", 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    parts.append(text)
    return parts

def get_ready_reels():
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    payload = {
        "filter": {
            "property": "–°—Ç–∞—Ç—É—Å",
            "select": {
                "equals": "–ì–æ—Ç–æ–≤"
            }
        }
    }
    res = requests.post(url, headers=headers, json=payload)
    res.raise_for_status()
    data = res.json()
    if not data["results"]:
        return None
    return random.choice(data["results"])

def extract_reel_info(page):
    props = page["properties"]
    video = props["–í–∏–¥–µ–æ"]["title"][0]["text"]["content"] if props["–í–∏–¥–µ–æ"]["title"] else ""
    hook = "".join([part["text"]["content"] for part in props["–•—É–∫"]["rich_text"]])
    desc = "".join([part["text"]["content"] for part in props["–û–ø–∏—Å–∞–Ω–∏–µ"]["rich_text"]])
    return video, hook, desc, page["id"]

def update_status(page_id):
    url = f"https://api.notion.com/v1/pages/{page_id}"
    payload = {
        "properties": {
            "–°—Ç–∞—Ç—É—Å": {
                "select": {
                    "name": "–ó–∞–ª–∏—Ç"
                }
            }
        }
    }
    res = requests.patch(url, headers=headers, json=payload)
    res.raise_for_status()

async def send_reel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = get_ready_reels()
    if not page:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ì–æ—Ç–æ–≤'.")
        return

    video, hook, desc, page_id = extract_reel_info(page)
    await update.message.reply_text(hook)
    await update.message.reply_text(desc)
    update_status(page_id)

async def get_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    payload = {
        "filter": {
            "property": "–°—Ç–∞—Ç—É—Å",
            "select": {
                "equals": "–ì–æ—Ç–æ–≤"
            }
        }
    }
    res = requests.post(url, headers=headers, json=payload)
    res.raise_for_status()
    data = res.json()
    count = len(data["results"])
    await update.message.reply_text(f"üìä –°–µ–π—á–∞—Å {count} Reels —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ì–æ—Ç–æ–≤'.")

def add_to_notion(hook, description, video):
    url = "https://api.notion.com/v1/pages"
    data = {
        "parent": { "database_id": DATABASE_ID },
        "properties": {
            "–í–∏–¥–µ–æ": {
                "title": [{
                    "text": { "content": str(video) }
                }]
            },
            "–•—É–∫": {
                "rich_text": [{"text": {"content": part}} for part in split_text(str(hook))]
            },
            "–û–ø–∏—Å–∞–Ω–∏–µ": {
                "rich_text": [{"text": {"content": part}} for part in split_text(str(description))]
            },
            "–°—Ç–∞—Ç—É—Å": {
                "select": { "name": "–ì–æ—Ç–æ–≤" }
            }
        }
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()

async def add_combined(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message.text.replace("/add", "", 1).strip()
        if not message:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—É–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ /add.")
            return
        parts = message.split("\n\n", 1)
        hook = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
        add_to_notion(hook, description, "-")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")


from telegram.ext import ConversationHandler

TEXT_INPUT, VIDEO_INPUT = range(2)

async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ö—É–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî —Ö—É–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ.")
    return TEXT_INPUT

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    message = update.message.text.strip()
    parts = message.split("\n\n", 1)
    hook = parts[0].strip()
    description = parts[1].strip() if len(parts) > 1 else ""
    try:
        add_to_notion(hook, description, "")
        # –û—Ç–≤–µ—Ç: –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ö—É–∫ –∏ —Ä–∏–ª—Å)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    return ConversationHandler.END

async def receive_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    video = update.message.text.strip()
    hook = user_data[uid]["hook"]
    desc = user_data[uid]["desc"]
    try:
        add_to_notion(hook, desc, video)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    user_data.pop(uid)
    return ConversationHandler.END


if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("reel", send_reel))
    app.add_handler(CommandHandler("score", get_score))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", start_add)],
        states={
            TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text)],
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–∏—à–∏ /reel –∏–ª–∏ /add.")
    # --- –í–°–¢–ê–í–¨ –≠–¢–û –í –ö–û–ù–ï–¶ bot_margarita.py ---

from telegram.ext import CommandHandler, MessageHandler, filters

# –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å—ë –∂–∏–≤–æ)
async def _start(update, context):
    await update.message.reply_text("–ë–æ—Ç –Ω–∞ Render –≥–æ—Ç–æ–≤. –ü–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É —ç—Ö–æ.")

async def _echo(update, context):
    if update.message and update.message.text:
        await update.message.reply_text(update.message.text)

def register_handlers(application):
    # –î–æ–±–∞–≤—å —Å—é–¥–∞ –í–°–ï —Ç–≤–æ–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ –¥–æ–±–∞–≤–ª—è–ª(–∞) —á–µ—Ä–µ–∑ add_handler(...)
    # –ú–∏–Ω–∏–º—É–º ‚Äî /start –∏ —ç—Ö–æ
    application.add_handler(CommandHandler("start", _start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _echo))

